# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

def get_dictionary_value (dictionary, key, requireValue = true)
  retval = dictionary.fetch(key) {
    ENV.fetch(key.to_s.upcase, nil)
  }

  unless retval || !requireValue
    UI.user_error! "Provide either #{key} value or #{key.to_s.upcase} environment variable"
  end

  retval
end

platform :android do
  properties_version_name_key = "versionName"
  properties_version_code_key = "versionCode"

  desc "Print properties file key"
  desc "- `key`: The properties file key to print"
  desc "- `path`: The path to the properties file"
  lane :print_properties_file_key do |options|
    Dir.chdir("..") do
      sh("./Overseer/scripts/print_properties_file_key.sh #{options[:key]} #{options[:path]}")
    end
  end

  desc "Set properties file key"
  desc "- `key`: The properties file key to set"
  desc "- `value`: The new value for the properties file key"
  desc "- `path`: The path to the properties file"
  lane :set_properties_file_key do |options|
    Dir.chdir("..") do
      sh("./Overseer/scripts/set_properties_file_key.sh #{options[:key]} #{options[:value]} #{options[:path]}")
    end
  end

  desc "Set version code to git commit count"
  lane :set_version_code_git_commit_count do |options|
    build_properties_path = get_dictionary_value(options, :build_properties_path)
    version_code = print_git_commit_count

    update_version_code(version_code: version_code)
  end

  desc "Update version code"
  lane :update_version_code do |options|
    build_properties_path = get_dictionary_value(options, :build_properties_path)
    version_code_current = print_properties_file_key(key: properties_version_code_key, path: build_properties_path)
    version_code = options.fetch(:version_code) {
      prompt(text: "Version code: ")
    }

    unless version_code != version_code_current
      UI.user_error! "Version code (#{version_code}) must be different than current version code (#{version_code_current})"
    end

    set_properties_file_key(key: properties_version_code_key, value: version_code, path: build_properties_path)
  end
end

platform :ios do
  info_plist_bundle_short_version_string_key = "CFBundleShortVersionString"
  info_plist_bundle_version_key = "CFBundleVersion"

  desc "Encrypt certificates and profiles"
  desc "- `openssl_password`: The openssl password to use when encrypting files"
  lane :encrypt do |options|
    openssl_password = get_dictionary_value(options, :openssl_password)

    Dir.chdir("..") do
      sh("./Overseer/scripts/encrypt.sh #{openssl_password}")
    end
  end

  desc "Decrypt certificates and profiles"
  desc "- `openssl_password`: The openssl password to use when decrypting files"
  lane :decrypt do |options|
    openssl_password = get_dictionary_value(options, :openssl_password)

    Dir.chdir("..") do
      sh("./Overseer/scripts/decrypt.sh #{openssl_password}")
    end
  end

  desc "Lint local podspec"
  desc "- `podspec_path`: The path to the podspec to lint"
  lane :lint_local_podspec do |options|
    podspec_path = get_dictionary_value(options, :podspec_path)

    Dir.chdir("..") do
      sh("bundle exec pod lib lint #{podspec_path}")
    end
  end

  desc "Lint remote podspec"
  desc "- `podspec_path`: The path to the podspec to lint"
  lane :lint_remote_podspec do |options|
    podspec_path = get_dictionary_value(options, :podspec_path)

    Dir.chdir("..") do
      sh("bundle exec pod spec lint #{podspec_path}")
    end
  end

  desc "Publish remote podspec"
  desc "- `podspec_path`: The path to the podspec to lint"
  lane :publish_remote_podspec do |options|
    podspec_path = get_dictionary_value(options, :podspec_path)

    Dir.chdir("..") do
      sh("bundle exec pod trunk push #{podspec_path}")
    end
  end

  desc "Unit tests"
  desc "- `scheme_name`: The scheme name to run unit tests for"
  lane :unit_tests do |options|
    scheme_name = get_dictionary_value(options, :scheme_name)

    run_tests(scheme: scheme_name)
  end

  desc "Generate code coverage XML file"
  desc "- `scheme_name`: The scheme name to generate code coverage XML file for"
  desc "- `xcodeproj_path`: The path to the xcodeproj file"
  lane :code_coverage do |options|
    Dir.chdir("..") do
      scheme_name = get_dictionary_value(options, :scheme_name)
      xcodeproj_path = get_dictionary_value(options, :xcodeproj_path)

      sh("bundle exec slather coverage --cobertura-xml --scheme #{scheme_name} #{xcodeproj_path}")
    end
  end

  desc "Print info plist key"
  desc "- `key`: The info plist key to print"
  desc "- `path`: The info plist path"
  lane :print_info_plist_key do |options|
    Dir.chdir("..") do
      sh("./Overseer/scripts/print_info_plist_key.sh #{options[:key]} #{options[:path]}").strip()
    end
  end

  desc "Print info plist bundle short version string key"
  desc "- `path`: The info plist path"
  lane :print_info_plist_bundle_short_version_string_key do |options|
    info_plist_path = get_dictionary_value(options, :info_plist_path)

    print_info_plist_key(key: info_plist_bundle_short_version_string_key, path: info_plist_path)
  end

  desc "Print info plist bundle version key"
  desc "- `path`: The info plist path"
  lane :print_info_plist_bundle_version_key do |options|
    info_plist_path = get_dictionary_value(options, :info_plist_path)

    print_info_plist_key(key: info_plist_bundle_version_key, path: info_plist_path)
  end

  desc "Update docs"
  desc "- `module_name`: The module name"
  desc "- `info_plist_path`: The path to the info plist"
  lane :update_docs do |options|
    Dir.chdir("..") do
      module_name = get_dictionary_value(options, :module_name)
      info_plist_path = get_dictionary_value(options, :info_plist_path)

      sh("./Overseer/scripts/jazzy.sh #{module_name} #{info_plist_path}")
      sh("git add docs/*")
      sh("git commit -a -m \"Update docs\"")
    end
  end

  desc "Create push git tag"
  desc "- `info_plist_path`: The info plist path"
  lane :create_push_git_tag do |options|
    info_plist_path = get_dictionary_value(options, :info_plist_path)
    tag_name = print_info_plist_key(key: info_plist_bundle_short_version_string_key, path: info_plist_path)
    
    Dir.chdir("..") do
      sh("git tag -a #{tag_name} -m \"Version #{tag_name}\"")
      sh("git push --follow-tags")
    end
  end

  desc "Updates the version string"
  desc "- `version_string`: The version string to update to"
  desc "- `info_plist_path` The path to the info plist to update"
  desc "- `podspec_path`: The path to the podspec to update"
  lane :update_version_string do |options|
    info_plist_path = get_dictionary_value(options, :info_plist_path)
    podspec_path = get_dictionary_value(options, :podspec_path, requireValue=false)
    version_string_current = print_info_plist_key(key: info_plist_bundle_short_version_string_key, path: info_plist_path)
    version_string = options.fetch(:version_string) {
      prompt(text: "Version string: ")
    }

    unless version_string != version_string_current
      UI.user_error! "Version name (#{version_string}) must be different than current version (#{version_string_current})"
    end

    Dir.chdir("..") do
      sh("./Overseer/scripts/set_info_plist_key.sh #{info_plist_bundle_short_version_string_key} #{version_string} #{info_plist_path}")
      
      if podspec_path
        sh("./Overseer/scripts/set_podspec_version.sh #{version_string} #{podspec_path}")
      end

      sh("git commit -a -m \"Update version string to #{version_string}\"")
    end
  end

  desc "Increments the version"
  desc "- `info_plist_path` The path to the info plist to update"
  lane :increment_version do |options|
    info_plist_path = get_dictionary_value(options, :info_plist_path)
    version_current = print_info_plist_key(key: info_plist_bundle_version_key, path: info_plist_path)
    version = (version_current.to_i + 1).to_s

    update_version(info_plist_path: info_plist_path, version: version)
  end

  desc "Set version to git commit count"
  desc "- `info_plist_path` The path to the info plist to update"
  lane :set_version_git_commit_count do |options|
    info_plist_path = get_dictionary_value(options, :info_plist_path)
    version = print_git_commit_count

    update_version(info_plist_path: info_plist_path, version: version)
  end

  desc "Updates the version"
  desc "- `version`: The version to update to"
  desc "- `info_plist_path` The path to the info plist to update"
  lane :update_version do |options|
    info_plist_path = get_dictionary_value(options, :info_plist_path)
    version_current = print_info_plist_key(key: info_plist_bundle_version_key, path: info_plist_path)
    version = options.fetch(:version) {
      prompt(text: "Version: ")
    }

    unless version != version_current
      UI.user_error! "Version (#{version}) must be different than current version (#{version_current})"
    end

    Dir.chdir("..") do
      sh("./Overseer/scripts/set_info_plist_key.sh #{info_plist_bundle_version_key} #{version} #{info_plist_path}")
      sh("git commit -a -m \"Update version to #{version}\"")
    end
  end
end

private_lane :print_git_commit_count do
  sh("git rev-list --count HEAD").strip()
end