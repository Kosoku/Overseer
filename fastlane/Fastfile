# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

def get_dictionary_value (dictionary, key)
  retval = dictionary.fetch(key) {
    ENV.fetch(key.upcase, nil)
  }

  unless retval
    UI.user_error! "Provide either #{key} value or #{key.upcase} environment variable"
  end

  retval
end

platform :ios do
  info_plist_bundle_short_version_string_key = "CFBundleShortVersionString"

  desc "Lint local podspec"
  desc "- `podspec_path`: The path to the podspec to lint"
  lane :lint_local_podspec do |options|
    podspec_path = get_dictionary_value(options, "podspec_path")

    Dir.chdir("..") do
      sh("bundle exec pod lib lint #{podspec_path}")
    end
  end

  desc "Lint remote podspec"
  desc "- `podspec_path`: The path to the podspec to lint"
  lane :lint_remote_podspec do |options|
    podspec_path = get_dictionary_value(options, "podspec_path")

    Dir.chdir("..") do
      sh("bundle exec pod spec lint #{podspec_path}")
    end
  end

  desc "Publish remote podspec"
  desc "- `podspec_path`: The path to the podspec to lint"
  lane :publish_remote_podspec do |options|
    podspec_path = get_dictionary_value(options, "podspec_path")

    Dir.chdir("..") do
      sh("bundle exec pod trunk push #{podspec_path}")
    end
  end

  desc "Unit tests"
  desc "- `scheme_name`: The scheme name to run unit tests for"
  lane :unit_tests do |options|
    scheme_name = get_dictionary_value(options, "scheme_name")

    run_tests(scheme: scheme_name)
  end

  desc "Generate code coverage XML file"
  desc "- `scheme_name`: The scheme name to generate code coverage XML file for"
  desc "- `xcodeproj_path`: The path to the xcodeproj file"
  lane :code_coverage do |options|
    Dir.chdir("..") do
      scheme_name = get_dictionary_value(options, "scheme_name")
      xcodeproj_path = get_dictionary_value(options, "xcodeproj_path")

      sh("bundle exec slather coverage --cobertura-xml --scheme #{scheme_name} #{xcodeproj_path}")
    end
  end

  desc "Print info plist key"
  desc "- `key`: The info plist key to print"
  desc "- `path`: The info plist path"
  lane :print_info_plist_key do |options|
    Dir.chdir("..") do
      sh("./Overseer/scripts/print_info_plist_key.sh #{options[:key]} #{options[:path]}").strip()
    end
  end

  desc "Update docs"
  desc "- `module_name`: The module name"
  desc "- `info_plist_path`: The path to the info plist"
  lane :update_docs do |options|
    Dir.chdir("..") do
      module_name = get_dictionary_value(options, "module_name")
      info_plist_path = get_dictionary_value(options, "info_plist_path")

      sh("./Overseer/scripts/jazzy.sh #{module_name} #{info_plist_path}")
      sh("git add docs/*")
      sh("git commit -a -m \"Update docs\"")
    end
  end

  desc "Create push git tag"
  desc "- `info_plist_path`: The info plist path"
  lane :create_push_git_tag do |options|
    info_plist_path = get_dictionary_value(options, "info_plist_path")
    tag_name = print_info_plist_key(key: "CFBundleShortVersionString", path: info_plist_path)
    
    Dir.chdir("..") do
      sh("git tag -a #{tag_name} -m \"Version #{tag_name}\"")
      sh("git push --follow-tags")
    end
  end

  desc "Updates the version"
  desc "- `version_name`: The version name to update to"
  desc "- `info_plist_path` The path to the info plist to update"
  desc "- `podspec_path`: The path to the podspec to update"
  lane :update_version do |options|
    info_plist_path = get_dictionary_value(options, "info_plist_path")
    podspec_path = get_dictionary_value(options, "podspec_path")
    version_name = options.fetch("version_name") {
      prompt(text: "Version name: ")
    }

    Dir.chdir("..") do
      sh("./Overseer/scripts/set_info_plist_key.sh #{info_plist_bundle_short_version_string_key} #{version_name} #{info_plist_path}")
      sh("./Overseer/scripts/set_podspec_version.sh #{version_name} #{podspec_path}")
      sh("git commit -a -m \"Update version to #{version_name}\"")
    end
  end
end
